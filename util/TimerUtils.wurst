package TimerUtils
import NoWurst
import Table
import ErrorHandling
import public Timer

/* Basic Timer Recycling and data attachment */	

timer array freeTimers
int freeTimersCount = 0
constant timerData = new Table()
constant HELD = 0x28829022

/** Attach Data to this timer */
public function timer.setData(integer data)
	timerData.saveInt( GetHandleId(this), data )
	
/** Retrieve the data attached to this timer */
public function timer.getData() returns integer
	return timerData.loadInt( GetHandleId(this) )

/** Get a new timer. Use this instead of "CreateTimer".
You can attach data to the timer with .setData and retrieve it with .getData
If you're done with the timer, release it with .release */
public function getTimer() returns timer
	if freeTimersCount > 0
		freeTimersCount--
		freeTimers[freeTimersCount].setData(0)
		return freeTimers[freeTimersCount]
	else
		return CreateTimer()..setData(0)
		
/** Release the timer. Use this instead of "DestroyTimer" ! */
public function timer.release()
	if this == null
		error("Trying to release a null timer")
		return
	if this.getData() == HELD
		error("ReleaseTimer: Double free!")
		return
	this.setData(HELD)
	this.pause()
	freeTimers[freeTimersCount] = this
	freeTimersCount++
