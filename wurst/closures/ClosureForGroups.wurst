package ClosureForGroups
import Integer
public interface ForGroupCallback
	function callback(unit u)
		
ForGroupCallback array tempCallbacks
var tempCallbacksCount = 0
constant filter = Filter(() -> currentCallback().callback(GetFilterUnit()))

function pushCallback(ForGroupCallback c)
	tempCallbacks[tempCallbacksCount] = c
	tempCallbacksCount++
	
function popCallback()
	tempCallbacksCount--
	destroy tempCallbacks[tempCallbacksCount]

function currentCallback() returns ForGroupCallback
	return tempCallbacks[tempCallbacksCount - 1]
		
public function forUnitsOfType(string unitname, ForGroupCallback c)
	pushCallback(c)
	GroupEnumUnitsOfType(ENUM_GROUP, unitname, filter)
	popCallback()

public function forUnitsOfPlayer(player p, ForGroupCallback c)
	pushCallback(c)
	GroupEnumUnitsOfPlayer(ENUM_GROUP, p, filter)
	popCallback()

public function forUnitsOfTypeCounted(string unitname, int count, ForGroupCallback c)
	pushCallback(c)
	GroupEnumUnitsOfTypeCounted(ENUM_GROUP, unitname, filter, count)
	popCallback()

public function forUnitsInRect(rect r, ForGroupCallback c)
	pushCallback(c)
	GroupEnumUnitsInRect(ENUM_GROUP, r, filter)
	popCallback()

public function forUnitsInRectCounted(rect r, int count, ForGroupCallback c)
	pushCallback(c)
	GroupEnumUnitsInRectCounted(ENUM_GROUP, r, filter, count)
	popCallback()

public function forUnitsInRange(vec2 pos, real radius, ForGroupCallback c)
	pushCallback(c)
	GroupEnumUnitsInRange(ENUM_GROUP, pos.x, pos.y, radius, filter)
	popCallback()

public function forUnitsInRangeCounted(vec2 pos, real radius, int count, ForGroupCallback c)
	pushCallback(c)
	GroupEnumUnitsInRangeCounted(ENUM_GROUP, pos.x, pos.y, radius, filter, count)
	popCallback()

public function forUnitsSelected(player p, ForGroupCallback c)
	pushCallback(c)
	GroupEnumUnitsSelected(ENUM_GROUP, p, filter)
	popCallback()

public function forNearestUnit(vec2 pos, real range, filterfunc filter, ForGroupCallback c)
	pushCallback(c)
	GroupEnumUnitsInRange(ENUM_GROUP, pos.x, pos.y, range, filter)
	unit nearest = null
	var bestDist = REAL_MAX
	for u from ENUM_GROUP
		let distSq = pos.distanceToSq(u.getPos())
		if distSq < bestDist
			nearest = u
			bestDist = distSq
	c.callback(nearest)
	popCallback()

// Destructables

public interface ForGroupCallbackD
	function callback(destructable d)
	
function filterD() returns boolean
	currentCallbackD().callback(GetEnumDestructable())
	return false
	
ForGroupCallbackD array tempCallbacksD
int tempCallbacksDCount = 0

function pushCallbackD(ForGroupCallbackD c)
	tempCallbacksD[tempCallbacksDCount] = c
	tempCallbacksDCount++

function popCallbackD()
	tempCallbacksDCount--
	destroy tempCallbacksD[tempCallbacksDCount]

function currentCallbackD() returns ForGroupCallbackD
	return tempCallbacksD[tempCallbacksDCount - 1]

public function forDestructablesInRect(rect r, ForGroupCallbackD cb)
	pushCallbackD(cb)
	EnumDestructablesInRect(r, null, () -> filterD())
	popCallbackD()


destructable nearestD = null
real nearestDDist = REAL_MAX
vec2 gpos = ZERO2

public function forNearestDestructable(vec2 pos, real range, ForGroupCallbackD c)
	pushCallbackD(c)
	gpos = pos
	nearestDDist = REAL_MAX
	nearestD = null
	let r = Rect(pos.x - range, pos.y - range, pos.x + range, pos.y + range)
	EnumDestructablesInRect(r, filterEnumDestructablesInCircleBJ, () -> begin
		let dist = gpos.distanceToSq(GetFilterDestructable().getPos())
		if dist < nearestDDist
			nearestD = GetFilterDestructable()
			nearestDDist = dist
	end)
	c.callback(nearestD)
	popCallbackD()

