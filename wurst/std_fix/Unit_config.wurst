package Unit_config
import NoWurst
import Unit
import Annotations
import YD_Scripts
import Integer_config
import HashMap
import HashList
import Player
import Item_config
    
let hero_mainprop_map=new HashMap<unit,int>()
public function unit.exMainProp() returns string
    if this.isType(UNIT_TYPE_HERO)
        return EXExecuteScript("(require 'jass.slk').unit['"+this.getTypeId().toIdString()+"'].Primary")
    return null
@inline public function unit.getFace() returns real
    return GetUnitFacing(this)
@inline public function unit.getStr() returns int
    return this.getStr(true)
@inline public function unit.getAgi() returns int
    return this.getAgi(true)
@inline public function unit.getInt() returns int
    return this.getInt(true)
/** 获取单位全属性之和*/
@inline public function unit.getPropSum() returns int
    return this.getStr(true) + this.getAgi(true) + this.getInt(true)
/** 获取单位主属性*/
public function unit.getMainProp() returns int
    int ma = hero_mainprop_map.get(this)
    if ma == 0
        let as = this.exMainProp()
        switch as
            case "STR"
                ma = 1
            case "AGI"
                ma = 2
            case "INT"
                ma = 3
        hero_mainprop_map.put(this, ma)
    var i = 0
    switch ma
        case 1
            i = this.getStr(true)
        case 2
            i = this.getAgi(true)
        case 3
            i = this.getInt(true)
    return i

/** 获取单位全属性乘积*/
@inline public function unit.getPropProd() returns int
    return this.getStr(true) * this.getAgi(true) * this.getInt(true)
/** 获取单位HP损失值*/
@inline public function unit.getSubHP() returns real
    return this.getMaxHP() - this.getHP()
/** 获取单位HP损失值百分比*/
@inline public function unit.getSubHPPercent() returns real
    return (this.getMaxHP() - this.getHP())/this.getMaxHP()
/** 获取单位HP百分比*/
@inline public function unit.getHPPercent() returns real
    return this.getHP()/this.getMaxHP()
/** 获取单位物品列表HashList<item>*/
public function unit.getInventroy() returns HashList<item>
    HashList<item> list = new HashList<item>()
    for int i = 0 to 5
        item tempItem = this.itemInSlot(i)
        if(tempItem != null)
            list.add(tempItem)
    return list

@inline public function unit.getItem(int index) returns item
    return this.itemInSlot(index)
/** 单位瞬移(V2)*/
@inline public function unit.setPosPro(vec2 pos)
    this.setPosPro(pos,0)
/** 单位瞬移并移动镜头(V2,镜头时间)*/
public function unit.setPosPro(vec2 pos,real time)
    let p=this.getOwner()
    this.setPos(pos)
    p.panCamToTimed(this, time)
    p.clearSelection()
    p.select(this)
//判断单位的类型
//is英雄
@inline public function unit.isHero() returns bool
    return this.isType(UNIT_TYPE_HERO)
//is马甲
@inline public function unit.isDummy() returns bool
    return this.getAbilityLevel('Aloc') > 0
//is建筑
@inline public function unit.isBuilding() returns bool
    return this.isType(UNIT_TYPE_STRUCTURE) 
/** 单位替换为新单位(id)*/
@inline public function unit.replace(int newUnitId) returns unit
    return ReplaceUnitBJ(this, newUnitId, bj_UNIT_STATE_METHOD_DEFAULTS)
/** 设置技能等级(自动添加删除技能)*/
public function unit.setAbilityLevel(int abilId, int lvl)
    if lvl == 0
        this.removeAbility(abilId)
        return
    let oLv = this.getAbilityLevel(abilId)
    if oLv == 0
        this.addAbility(abilId)
    SetUnitAbilityLevel(this,abilId, lvl)
/** 设置单位物品使用次数(无物品会创建)*/
public function unit.setItemCharges(int itemId,int charges)
    if this.hasItemById(itemId)
        let item_ = GetItemOfTypeFromUnitBJ(this,itemId)
        let i =GetItemCharges(item_)
        if(i>0)
            item_.setCharges(charges)
    else
        if charges > 0
            let item_ = this.addItemById(itemId)
            item_.setCharges(charges)
            let i =GetItemCharges(item_)
            if i > 0
                item_.setCharges(charges)